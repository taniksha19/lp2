#include <iostream>
#include <algorithm>
#include <vector>

// Structure to represent a job
struct Job {
    int id;             // Job ID
    int deadline;       // Job deadline
    int processingTime; // Job processing time
};

// Comparison function for sorting jobs based on processing time
bool compareJobs(const Job& a, const Job& b) {
    return a.processingTime < b.processingTime;
}

// Function to schedule jobs and calculate the total delay
int scheduleJobs(std::vector<Job>& jobs) {
    // Sort the jobs based on processing time
    std::sort(jobs.begin(), jobs.end(), compareJobs);

    int n = jobs.size();  // Number of jobs
    int totalDelay = 0;   // Total delay in the schedule

    std::vector<int> schedule(n, -1);  // Schedule to store assigned time slots

    // Assign time slots to jobs in a greedy manner
    for (int i = 0; i < n; ++i) {
        // Find the earliest available time slot for the job
        int slot = jobs[i].deadline - 1;
        while (slot >= 0 && schedule[slot] != -1) {
            --slot;
        }

        // If a valid time slot is found, assign the job to that slot
        if (slot >= 0) {
            schedule[slot] = jobs[i].id;
        }
        else {
            // No available time slot, job missed the deadline
            totalDelay += jobs[i].processingTime;
        }
    }

    // Print the schedule
    std::cout << "Job Schedule:\n";
    for (int i = 0; i < n; ++i) {
        std::cout << "Job " << schedule[i] << " -> Time Slot " << i + 1 << "\n";
    }

    return totalDelay;
}

int main() {
    int numJobs;
    std::cout << "Enter the number of jobs: ";
    std::cin >> numJobs;

    std::vector<Job> jobs(numJobs);

    // Input job details from the user
    for (int i = 0; i < numJobs; ++i) {
        std::cout << "Enter details for Job " << i + 1 << ":\n";
        std::cout << "  Deadline: ";
        std::cin >> jobs[i].deadline;
        std::cout << "  Processing Time: ";
        std::cin >> jobs[i].processingTime;
        jobs[i].id = i + 1;
    }

    // Schedule the jobs and calculate the total delay
    int totalDelay = scheduleJobs(jobs);

    std::cout << "Total Delay: " << totalDelay << "\n";

    return 0;
}
